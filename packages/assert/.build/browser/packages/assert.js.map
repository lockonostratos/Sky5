{"version":3,"file":"\\packages\\assert.js","sources":["assert/client\\assert.js","assert/export-assert.js"],"names":[],"mappings":";;;;;;;;AAAA,iD;AACA,E;AACA,oD;AACA,E;AACA,0B;AACA,E;AACA,8C;AACA,yB;AACA,E;AACA,+E;AACA,2E;AACA,6E;AACA,8E;AACA,6E;AACA,2D;AACA,E;AACA,6E;AACA,sD;AACA,E;AACA,6E;AACA,2E;AACA,8E;AACA,6E;AACA,+E;AACA,kE;;AAEA,mB;;AAEA,iC;AACA,2C;AACA,iC;AACA,kB;AACA,kB;AACA,iB;AACA,E;;AAEA,U;AACA,Y;AACA,uC;AACA,4B;AACA,kD;AACA,oB;AACA,oB;AACA,0B;AACA,uB;AACA,0B;AACA,O;AACA,O;AACA,I;AACA,yB;AACA,6B;AACA,I;AACA,4B;AACA,oC;AACA,I;AACA,yB;AACA,wB;AACA,I;AACA,oC;AACA,uB;AACA,I;AACA,2B;AACA,mC;AACA,I;AACA,2B;AACA,mC;AACA,I;AACA,2B;AACA,mC;AACA,I;AACA,8B;AACA,0B;AACA,I;AACA,0B;AACA,8E;AACA,I;AACA,2B;AACA,mD;AACA,I;AACA,uB;AACA,0E;AACA,I;AACA,wB;AACA,yB;AACA,qE;AACA,I;AACA,6B;AACA,qC;AACA,I;AACA,8B;AACA,0B;AACA,iC;AACA,gC;AACA,gC;AACA,+C;AACA,iC;AACA,I;AACA,+B;AACA,6C;AACA,G;AACA,E;;AAEA,mC;;AAEA,mD;AACA,mD;AACA,iB;AACA,sB;AACA,sB;AACA,4C;AACA,oB;AACA,K;AACA,C;;AAEA,qD;AACA,+D;AACA,yD;;AAEA,gB;;AAEA,0B;;AAEA,uE;AACA,0B;AACA,E;;AAEA,8C;AACA,gD;AACA,8C;AACA,oD;;AAEA,0D;AACA,+B;AACA,+B;AACA,mC;AACA,mC;AACA,wB;AACA,mC;AACA,kC;AACA,U;AACA,oC;AACA,iC;AACA,G;AACA,8D;;AAEA,gC;AACA,sD;AACA,U;AACA,6D;AACA,qD;AACA,S;AACA,gD;AACA,kB;AACA,G;AACA,E;;AAEA,yC;AACA,4C;;AAEA,+B;AACA,gC;AACA,sB;AACA,G;AACA,mE;AACA,4B;AACA,G;AACA,uD;AACA,4B;AACA,G;AACA,e;AACA,C;;AAEA,yB;AACA,yB;AACA,4C;AACA,U;AACA,a;AACA,G;AACA,C;;AAEA,2B;AACA,qE;AACA,8B;AACA,gE;AACA,C;;AAEA,8D;AACA,kE;AACA,gE;AACA,W;;AAEA,iE;AACA,iE;AACA,mE;AACA,iE;AACA,oB;;AAEA,wE;AACA,mC;AACA,qB;AACA,mB;AACA,uB;AACA,uB;AACA,0C;AACA,K;AACA,C;;AAEA,+D;AACA,mB;;AAEA,mE;AACA,c;AACA,iC;AACA,8D;AACA,0D;AACA,iD;;AAEA,6B;AACA,0D;AACA,C;AACA,e;;AAEA,kE;AACA,M;AACA,+C;;AAEA,0D;AACA,8E;AACA,E;;AAEA,4E;AACA,0D;;AAEA,gE;AACA,2B;AACA,2D;AACA,G;AACA,E;;AAEA,+D;AACA,mD;;AAEA,kE;AACA,sC;AACA,mE;AACA,G;AACA,E;;AAEA,uC;AACA,oE;AACA,4B;AACA,gB;;AAEA,mE;AACA,0D;AACA,I;AACA,gD;AACA,qD;AACA,Q;AACA,I;AACA,mB;;AAEA,qE;AACA,yE;AACA,4D;AACA,mD;;AAEA,sE;AACA,sE;AACA,mE;AACA,gE;AACA,+C;AACA,+C;AACA,qD;AACA,qD;AACA,qD;;AAEA,qE;AACA,qC;AACA,kE;AACA,8B;;AAEA,4E;AACA,0E;AACA,qE;AACA,2E;AACA,yE;AACA,8D;AACA,U;AACA,sC;AACA,G;AACA,C;;AAEA,8B;AACA,wE;AACA,C;;AAEA,yB;AACA,6D;AACA,iB;AACA,uC;AACA,gD;AACA,0E;AACA,8C;AACA,uB;AACA,0B;AACA,mB;AACA,K;AACA,uB;AACA,uB;AACA,4B;AACA,G;AACA,O;AACA,4B;AACA,4B;AACA,e;AACA,yE;AACA,iB;AACA,G;AACA,kE;AACA,oB;AACA,6B;AACA,iB;AACA,mE;AACA,Y;AACA,Y;AACA,qB;AACA,wC;AACA,uB;AACA,mB;AACA,G;AACA,sD;AACA,mC;AACA,wC;AACA,gB;AACA,kD;AACA,G;AACA,c;AACA,C;;AAEA,kE;AACA,sD;;AAEA,wE;AACA,qC;AACA,yE;AACA,G;AACA,E;;AAEA,gF;AACA,qD;;AAEA,sE;AACA,4B;AACA,+D;AACA,G;AACA,E;;AAEA,wE;AACA,4E;;AAEA,4E;AACA,4B;AACA,kE;AACA,G;AACA,E;;AAEA,8C;AACA,6B;AACA,iB;AACA,G;;AAEA,sE;AACA,iC;AACA,0C;AACA,gB;AACA,kD;AACA,gB;AACA,G;;AAEA,e;AACA,C;;AAEA,yD;AACA,a;;AAEA,gC;AACA,uB;AACA,oB;AACA,G;;AAEA,O;AACA,Y;AACA,e;AACA,e;AACA,G;;AAEA,6E;AACA,4C;;AAEA,+B;AACA,mE;AACA,G;;AAEA,4D;AACA,+D;AACA,G;;AAEA,2C;AACA,0E;AACA,iB;AACA,G;AACA,C;;AAEA,kC;AACA,gD;;AAEA,yE;AACA,6D;AACA,E;;AAEA,4D;AACA,4D;AACA,8D;AACA,E;;AAEA,wD;;AAEA,iD;AACA,gC;AACA,kB;AACA,K;AACA,C;;AAEA,S;;;;;;;;;;;;;;;;;;;;AClbA,qB","sourcesContent":["// http://wiki.commonjs.org/wiki/Unit_Testing/1.0\r\n//\r\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\r\n//\r\n// Copyright (c) 2011 Jxck\r\n//\r\n// Originally from node.js (http://nodejs.org)\r\n// Copyright Joyent, Inc.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the 'Software'), to\r\n// deal in the Software without restriction, including without limitation the\r\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\r\n// sell copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\r\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n(function(global) {\r\n\r\n// Object.create compatible in IE\r\nvar create = Object.create || function(p) {\r\n  if (!p) throw Error('no type');\r\n  function f() {};\r\n  f.prototype = p;\r\n  return new f();\r\n};\r\n\r\n// UTILITY\r\nvar util = {\r\n  inherits: function(ctor, superCtor) {\r\n    ctor.super_ = superCtor;\r\n    ctor.prototype = create(superCtor.prototype, {\r\n      constructor: {\r\n        value: ctor,\r\n        enumerable: false,\r\n        writable: true,\r\n        configurable: true\r\n      }\r\n    });\r\n  },\r\n  isArray: function(ar) {\r\n    return Array.isArray(ar);\r\n  },\r\n  isBoolean: function(arg) {\r\n    return typeof arg === 'boolean';\r\n  },\r\n  isNull: function(arg) {\r\n    return arg === null;\r\n  },\r\n  isNullOrUndefined: function(arg) {\r\n    return arg == null;\r\n  },\r\n  isNumber: function(arg) {\r\n    return typeof arg === 'number';\r\n  },\r\n  isString: function(arg) {\r\n    return typeof arg === 'string';\r\n  },\r\n  isSymbol: function(arg) {\r\n    return typeof arg === 'symbol';\r\n  },\r\n  isUndefined: function(arg) {\r\n    return arg === void 0;\r\n  },\r\n  isRegExp: function(re) {\r\n    return util.isObject(re) && util.objectToString(re) === '[object RegExp]';\r\n  },\r\n  isObject: function(arg) {\r\n    return typeof arg === 'object' && arg !== null;\r\n  },\r\n  isDate: function(d) {\r\n    return util.isObject(d) && util.objectToString(d) === '[object Date]';\r\n  },\r\n  isError: function(e) {\r\n    return isObject(e) &&\r\n      (objectToString(e) === '[object Error]' || e instanceof Error);\r\n  },\r\n  isFunction: function(arg) {\r\n    return typeof arg === 'function';\r\n  },\r\n  isPrimitive: function(arg) {\r\n    return arg === null ||\r\n      typeof arg === 'boolean' ||\r\n      typeof arg === 'number' ||\r\n      typeof arg === 'string' ||\r\n      typeof arg === 'symbol' ||  // ES6 symbol\r\n      typeof arg === 'undefined';\r\n  },\r\n  objectToString: function(o) {\r\n    return Object.prototype.toString.call(o);\r\n  }\r\n};\r\n\r\nvar pSlice = Array.prototype.slice;\r\n\r\n// from https://github.com/substack/node-deep-equal\r\nvar Object_keys = typeof Object.keys === 'function'\r\n    ? Object.keys\r\n    : function (obj) {\r\n        var keys = [];\r\n        for (var key in obj) keys.push(key);\r\n        return keys;\r\n    }\r\n;\r\n\r\n// 1. The assert module provides functions that throw\r\n// AssertionError's when particular conditions are not met. The\r\n// assert module must conform to the following interface.\r\n\r\nvar assert = ok;\r\n\r\nglobal['assert'] = assert;\r\n\r\nif (typeof module === 'object' && typeof module.exports === 'object') {\r\n  module.exports = assert;\r\n};\r\n\r\n// 2. The AssertionError is defined in assert.\r\n// new assert.AssertionError({ message: message,\r\n//                             actual: actual,\r\n//                             expected: expected })\r\n\r\nassert.AssertionError = function AssertionError(options) {\r\n  this.name = 'AssertionError';\r\n  this.actual = options.actual;\r\n  this.expected = options.expected;\r\n  this.operator = options.operator;\r\n  if (options.message) {\r\n    this.message = options.message;\r\n    this.generatedMessage = false;\r\n  } else {\r\n    this.message = getMessage(this);\r\n    this.generatedMessage = true;\r\n  }\r\n  var stackStartFunction = options.stackStartFunction || fail;\r\n\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, stackStartFunction);\r\n  } else {\r\n    // try to throw an error now, and from the stack property\r\n    // work out the line that called in to assert.js.\r\n    try {\r\n      this.stack = (new Error).stack.toString();\r\n    } catch (e) {}\r\n  }\r\n};\r\n\r\n// assert.AssertionError instanceof Error\r\nutil.inherits(assert.AssertionError, Error);\r\n\r\nfunction replacer(key, value) {\r\n  if (util.isUndefined(value)) {\r\n    return '' + value;\r\n  }\r\n  if (util.isNumber(value) && (isNaN(value) || !isFinite(value))) {\r\n    return value.toString();\r\n  }\r\n  if (util.isFunction(value) || util.isRegExp(value)) {\r\n    return value.toString();\r\n  }\r\n  return value;\r\n}\r\n\r\nfunction truncate(s, n) {\r\n  if (util.isString(s)) {\r\n    return s.length < n ? s : s.slice(0, n);\r\n  } else {\r\n    return s;\r\n  }\r\n}\r\n\r\nfunction getMessage(self) {\r\n  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +\r\n         self.operator + ' ' +\r\n         truncate(JSON.stringify(self.expected, replacer), 128);\r\n}\r\n\r\n// At present only the three keys mentioned above are used and\r\n// understood by the spec. Implementations or sub modules can pass\r\n// other keys to the AssertionError's constructor - they will be\r\n// ignored.\r\n\r\n// 3. All of the following functions must throw an AssertionError\r\n// when a corresponding condition is not met, with a message that\r\n// may be undefined if not provided.  All assertion methods provide\r\n// both the actual and expected values to the assertion error for\r\n// display purposes.\r\n\r\nfunction fail(actual, expected, message, operator, stackStartFunction) {\r\n  throw new assert.AssertionError({\r\n    message: message,\r\n    actual: actual,\r\n    expected: expected,\r\n    operator: operator,\r\n    stackStartFunction: stackStartFunction\r\n  });\r\n}\r\n\r\n// EXTENSION! allows for well behaved errors defined elsewhere.\r\nassert.fail = fail;\r\n\r\n// 4. Pure assertion tests whether a value is truthy, as determined\r\n// by !!guard.\r\n// assert.ok(guard, message_opt);\r\n// This statement is equivalent to assert.equal(true, !!guard,\r\n// message_opt);. To test strictly for the value true, use\r\n// assert.strictEqual(true, guard, message_opt);.\r\n\r\nfunction ok(value, message) {\r\n  if (!value) fail(value, true, message, '==', assert.ok);\r\n}\r\nassert.ok = ok;\r\n\r\n// 5. The equality assertion tests shallow, coercive equality with\r\n// ==.\r\n// assert.equal(actual, expected, message_opt);\r\n\r\nassert.equal = function equal(actual, expected, message) {\r\n  if (actual != expected) fail(actual, expected, message, '==', assert.equal);\r\n};\r\n\r\n// 6. The non-equality assertion tests for whether two objects are not equal\r\n// with != assert.notEqual(actual, expected, message_opt);\r\n\r\nassert.notEqual = function notEqual(actual, expected, message) {\r\n  if (actual == expected) {\r\n    fail(actual, expected, message, '!=', assert.notEqual);\r\n  }\r\n};\r\n\r\n// 7. The equivalence assertion tests a deep equality relation.\r\n// assert.deepEqual(actual, expected, message_opt);\r\n\r\nassert.deepEqual = function deepEqual(actual, expected, message) {\r\n  if (!_deepEqual(actual, expected)) {\r\n    fail(actual, expected, message, 'deepEqual', assert.deepEqual);\r\n  }\r\n};\r\n\r\nfunction _deepEqual(actual, expected) {\r\n  // 7.1. All identical values are equivalent, as determined by ===.\r\n  if (actual === expected) {\r\n    return true;\r\n\r\n  // } else if (util.isBuffer(actual) && util.isBuffer(expected)) {\r\n  //   if (actual.length != expected.length) return false;\r\n  //\r\n  //   for (var i = 0; i < actual.length; i++) {\r\n  //     if (actual[i] !== expected[i]) return false;\r\n  //   }\r\n  //\r\n  //   return true;\r\n\r\n  // 7.2. If the expected value is a Date object, the actual value is\r\n  // equivalent if it is also a Date object that refers to the same time.\r\n  } else if (util.isDate(actual) && util.isDate(expected)) {\r\n    return actual.getTime() === expected.getTime();\r\n\r\n  // 7.3 If the expected value is a RegExp object, the actual value is\r\n  // equivalent if it is also a RegExp object with the same source and\r\n  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).\r\n  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {\r\n    return actual.source === expected.source &&\r\n           actual.global === expected.global &&\r\n           actual.multiline === expected.multiline &&\r\n           actual.lastIndex === expected.lastIndex &&\r\n           actual.ignoreCase === expected.ignoreCase;\r\n\r\n  // 7.4. Other pairs that do not both pass typeof value == 'object',\r\n  // equivalence is determined by ==.\r\n  } else if (!util.isObject(actual) && !util.isObject(expected)) {\r\n    return actual == expected;\r\n\r\n  // 7.5 For all other Object pairs, including Array objects, equivalence is\r\n  // determined by having the same number of owned properties (as verified\r\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\r\n  // (although not necessarily the same order), equivalent values for every\r\n  // corresponding key, and an identical 'prototype' property. Note: this\r\n  // accounts for both named and indexed properties on Arrays.\r\n  } else {\r\n    return objEquiv(actual, expected);\r\n  }\r\n}\r\n\r\nfunction isArguments(object) {\r\n  return Object.prototype.toString.call(object) == '[object Arguments]';\r\n}\r\n\r\nfunction objEquiv(a, b) {\r\n  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))\r\n    return false;\r\n  // an identical 'prototype' property.\r\n  if (a.prototype !== b.prototype) return false;\r\n  //~~~I've managed to break Object.keys through screwy arguments passing.\r\n  //   Converting to array solves the problem.\r\n  if (isArguments(a)) {\r\n    if (!isArguments(b)) {\r\n      return false;\r\n    }\r\n    a = pSlice.call(a);\r\n    b = pSlice.call(b);\r\n    return _deepEqual(a, b);\r\n  }\r\n  try {\r\n    var ka = Object_keys(a),\r\n        kb = Object_keys(b),\r\n        key, i;\r\n  } catch (e) {//happens when one is a string literal and the other isn't\r\n    return false;\r\n  }\r\n  // having the same number of owned properties (keys incorporates\r\n  // hasOwnProperty)\r\n  if (ka.length != kb.length)\r\n    return false;\r\n  //the same set of keys (although not necessarily the same order),\r\n  ka.sort();\r\n  kb.sort();\r\n  //~~~cheap key test\r\n  for (i = ka.length - 1; i >= 0; i--) {\r\n    if (ka[i] != kb[i])\r\n      return false;\r\n  }\r\n  //equivalent values for every corresponding key, and\r\n  //~~~possibly expensive deep test\r\n  for (i = ka.length - 1; i >= 0; i--) {\r\n    key = ka[i];\r\n    if (!_deepEqual(a[key], b[key])) return false;\r\n  }\r\n  return true;\r\n}\r\n\r\n// 8. The non-equivalence assertion tests for any deep inequality.\r\n// assert.notDeepEqual(actual, expected, message_opt);\r\n\r\nassert.notDeepEqual = function notDeepEqual(actual, expected, message) {\r\n  if (_deepEqual(actual, expected)) {\r\n    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);\r\n  }\r\n};\r\n\r\n// 9. The strict equality assertion tests strict equality, as determined by ===.\r\n// assert.strictEqual(actual, expected, message_opt);\r\n\r\nassert.strictEqual = function strictEqual(actual, expected, message) {\r\n  if (actual !== expected) {\r\n    fail(actual, expected, message, '===', assert.strictEqual);\r\n  }\r\n};\r\n\r\n// 10. The strict non-equality assertion tests for strict inequality, as\r\n// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);\r\n\r\nassert.notStrictEqual = function notStrictEqual(actual, expected, message) {\r\n  if (actual === expected) {\r\n    fail(actual, expected, message, '!==', assert.notStrictEqual);\r\n  }\r\n};\r\n\r\nfunction expectedException(actual, expected) {\r\n  if (!actual || !expected) {\r\n    return false;\r\n  }\r\n\r\n  if (Object.prototype.toString.call(expected) == '[object RegExp]') {\r\n    return expected.test(actual);\r\n  } else if (actual instanceof expected) {\r\n    return true;\r\n  } else if (expected.call({}, actual) === true) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction _throws(shouldThrow, block, expected, message) {\r\n  var actual;\r\n\r\n  if (util.isString(expected)) {\r\n    message = expected;\r\n    expected = null;\r\n  }\r\n\r\n  try {\r\n    block();\r\n  } catch (e) {\r\n    actual = e;\r\n  }\r\n\r\n  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +\r\n            (message ? ' ' + message : '.');\r\n\r\n  if (shouldThrow && !actual) {\r\n    fail(actual, expected, 'Missing expected exception' + message);\r\n  }\r\n\r\n  if (!shouldThrow && expectedException(actual, expected)) {\r\n    fail(actual, expected, 'Got unwanted exception' + message);\r\n  }\r\n\r\n  if ((shouldThrow && actual && expected &&\r\n      !expectedException(actual, expected)) || (!shouldThrow && actual)) {\r\n    throw actual;\r\n  }\r\n}\r\n\r\n// 11. Expected to throw an error:\r\n// assert.throws(block, Error_opt, message_opt);\r\n\r\nassert.throws = function(block, /*optional*/error, /*optional*/message) {\r\n  _throws.apply(this, [true].concat(pSlice.call(arguments)));\r\n};\r\n\r\n// EXTENSION! This is annoying to write outside this module.\r\nassert.doesNotThrow = function(block, /*optional*/message) {\r\n  _throws.apply(this, [false].concat(pSlice.call(arguments)));\r\n};\r\n\r\nassert.ifError = function(err) { if (err) {throw err;}};\r\n\r\nif (typeof define === 'function' && define.amd) {\r\n  define('assert', function () {\r\n    return assert;\r\n  });\r\n}\r\n\r\n})(this);\r\n\r\n","assert = this.assert;"]}